import pandas as pd

# Load the training data
train_df = pd.read_csv("/train.csv")

# Load the test data
train_df = pd.read_csv("/test.csv")

# Check for missing values in the training dataset
print("Missing values in training dataset:")
print(train_df.isnull().sum())

print("\nMissing values in test dataset:")
print(test_df.isnull().sum())

# Calculate percentage of missing values for better understanding
print("\nPercentage of missing values in training dataset:")
print(train_df.isnull().sum() / len(train_df) * 100)

print("\nPercentage of missing values in test dataset:")
print(test_df.isnull().sum() / len(test_df) * 100)

# Visualize missing values
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
sns.heatmap(train_df.isnull(), cbar=False, cmap='viridis', yticklabels=False)
plt.title('Missing Values in Training Dataset')

plt.subplot(1, 2, 2)
sns.heatmap(test_df.isnull(), cbar=False, cmap='viridis', yticklabels=False)
plt.title('Missing Values in Test Dataset')

plt.tight_layout()
plt.show()

   import matplotlib.pyplot as plt
   import seaborn as sns
   
   plt.figure(figsize=(10, 6))
   sns.barplot(x='Pclass', y='Survived', hue='Sex', data=train_df)
   plt.title('Survival Rate by Passenger Class and Gender')
   plt.xlabel('Passenger Class')
   plt.ylabel('Survival Rate')
   plt.show()

   plt.figure(figsize=(10, 6))
   sns.histplot(data=train_df, x='Age', hue='Survived', multiple='stack', kde=True)
   plt.title('Age Distribution by Survival Status')
   plt.xlabel('Age')
   plt.ylabel('Count')
   plt.show()

   plt.figure(figsize=(10, 6))
   sns.scatterplot(x='Age', y='Fare', hue='Survived', data=train_df)
   plt.title('Fare vs Age with Survival Status')
   plt.xlabel('Age')
   plt.ylabel('Fare')
   plt.show()

   plt.figure(figsize=(10, 8))
   numeric_df = train_df.select_dtypes(include=['int64', 'float64'])
   sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm')
   plt.title('Correlation Heatmap')
   plt.show()

   plt.figure(figsize=(8, 6))
   sns.barplot(x='Embarked', y='Survived', data=train_df)
   plt.title('Survival Rate by Port of Embarkation')
   plt.xlabel('Port')
   plt.ylabel('Survival Rate')
   plt.show()

print(train_df.head())
print(test_df.head())

# Check for missing values in each column
missing_values = test_df.isnull().sum()

# Display the count of missing values for each column
print("Missing values per column:")
print(missing_values)

# Visualize the missing values
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.barplot(x=missing_values.index, y=missing_values.values)
plt.xticks(rotation=90)
plt.title('Number of Missing Values per Column')
plt.xlabel('Columns')
plt.ylabel('Count of Missing Values')
plt.tight_layout()
plt.show()

# Identify columns that need imputation (columns with missing values)
columns_to_impute = missing_values[missing_values > 0].index.tolist()
print("\nColumns that need imputation:", columns_to_impute)

# Calculate percentage of missing values
missing_percentage = (missing_values / len(test_df)) * 100
print("\nPercentage of missing values per column:")
print(missing_percentage[missing_percentage > 0]) 

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# First, let's visualize the current distribution of fares to identify outliers
plt.figure(figsize=(12, 5))

# Plot 1: Histogram of fare distribution
plt.subplot(1, 2, 1)
sns.histplot(train_df['Fare'], kde=True)
plt.title('Fare Distribution')
plt.xlabel('Fare')
plt.ylabel('Frequency')

# Plot 2: Box plot to identify outliers
plt.subplot(1, 2, 2)
sns.boxplot(y=train_df['Fare'])
plt.title('Fare Box Plot')
plt.ylabel('Fare')
plt.tight_layout()
plt.show()

# Method 1: Create fare bins (quartiles)
# Create a new column with binned fares
train_df['Fare_binned'] = pd.qcut(train_df['Fare'], q=4, labels=['Low', 'Medium-Low', 'Medium-High', 'High'])

# Visualize the binned fares
plt.figure(figsize=(10, 5))
sns.countplot(x='Fare_binned', hue='Survived', data=train_df)
plt.title('Survival Count by Fare Bins')
plt.xlabel('Fare Category')
plt.ylabel('Count')
plt.legend(title='Survived')
plt.show()

# Method 2: Create custom fare bins
fare_bins = [0, 7.91, 14.45, 31, 600]  # Based on quartiles and max value
fare_labels = ['Low', 'Medium-Low', 'Medium-High', 'High']
train_df['Fare_custom_bins'] = pd.cut(train_df['Fare'], bins=fare_bins, labels=fare_labels)

# Method 3: Normalize the fare column
# Min-Max Scaling
train_df['Fare_normalized'] = (train_df['Fare'] - train_df['Fare'].min()) / (train_df['Fare'].max() - train_df['Fare'].min())

# Log transformation to handle skewness (adding 1 to avoid log(0))
train_df['Fare_log'] = np.log1p(train_df['Fare'])

# Visualize the transformed fare columns
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
sns.histplot(train_df['Fare_normalized'], kde=True)
plt.title('Min-Max Normalized Fare')

plt.subplot(1, 3, 2)
sns.histplot(train_df['Fare_log'], kde=True)
plt.title('Log-Transformed Fare')

plt.subplot(1, 3, 3)
sns.boxplot(y=train_df['Fare_log'])
plt.title('Log-Transformed Fare Box Plot')

plt.tight_layout()
plt.show()

# Display the first few rows with the new columns
print(train_df[['Fare', 'Fare_binned', 'Fare_custom_bins', 'Fare_normalized', 'Fare_log']].head())

# Apply the same transformations to the test set if needed
# Make sure to use the same bin edges and min/max values from the training set
